---
source: tests/test.rs
expression: parser.parse(&buffer).unwrap()
---
SynthProblem {
    imports: [],
    decls: [
        TypeDecl(
            "nat",
            Type(
                Variant([("O", Type(Tuple([]))), ("S", Type(Named("nat")))]),
            ),
        ),
        TypeDecl(
            "list",
            Type(
                Variant([("Nil", Type(Tuple([]))), ("Cons", Type(Tuple([Type(Named("nat")), Type(Named("list"))])))]),
            ),
        ),
        TypeDecl(
            "tree",
            Type(
                Variant([("Leaf", Type(Tuple([]))), ("Node", Type(Tuple([Type(Named("tree")), Type(Named("nat")), Type(Named("tree"))])))]),
            ),
        ),
        ExpDecl(
            "append",
            Exp(
                Fix("append", Type(Arrow(Type(Arrow(Type(Named("list")), Type(Named("list")))), Type(Named("list")))), Exp(Func(Param { name: "l1", ty: Type(Named("list")) }, Exp(Func(Param { name: "l2", ty: Type(Named("list")) }, Exp(Match(Exp(Var("l1")), [(Ctor("Nil", Wildcard), Exp(Var("l2"))), (Ctor("Cons", Tuple([Var("h"), Var("t")])), Exp(CTor("Cons", Exp(Tuple([Exp(Var("h")), Exp(App(Exp(App(Exp(Var("append")), Exp(Var("t")))), Exp(Var("l2"))))])))))]))))))),
            ),
        ),
    ],
    synth_type: Type(
        Arrow(Type(Named("tree")), Type(Named("list"))),
    ),
    spec: UIOEs(
        [
            Example {
                input: [
                    Exp(
                        CTor("Leaf", Exp(Tuple([]))),
                    ),
                ],
                output: Exp(
                    CTor("Nil", Exp(Tuple([]))),
                ),
            },
            Example {
                input: [
                    Exp(
                        CTor("Node", Exp(Tuple([Exp(CTor("Leaf", Exp(Tuple([])))), Exp(CTor("S", Exp(CTor("O", Exp(Tuple([])))))), Exp(CTor("Leaf", Exp(Tuple([]))))]))),
                    ),
                ],
                output: Exp(
                    CTor("Cons", Exp(Tuple([Exp(CTor("S", Exp(CTor("O", Exp(Tuple([])))))), Exp(CTor("Nil", Exp(Tuple([]))))]))),
                ),
            },
            Example {
                input: [
                    Exp(
                        CTor("Node", Exp(Tuple([Exp(CTor("Node", Exp(Tuple([Exp(CTor("Leaf", Exp(Tuple([])))), Exp(CTor("S", Exp(CTor("O", Exp(Tuple([])))))), Exp(CTor("Leaf", Exp(Tuple([]))))])))), Exp(CTor("S", Exp(CTor("S", Exp(CTor("O", Exp(Tuple([])))))))), Exp(CTor("Leaf", Exp(Tuple([]))))]))),
                    ),
                ],
                output: Exp(
                    CTor("Cons", Exp(Tuple([Exp(CTor("S", Exp(CTor("O", Exp(Tuple([])))))), Exp(CTor("Cons", Exp(Tuple([Exp(CTor("S", Exp(CTor("S", Exp(CTor("O", Exp(Tuple([])))))))), Exp(CTor("Nil", Exp(Tuple([]))))]))))]))),
                ),
            },
            Example {
                input: [
                    Exp(
                        CTor("Node", Exp(Tuple([Exp(CTor("Leaf", Exp(Tuple([])))), Exp(CTor("S", Exp(CTor("O", Exp(Tuple([])))))), Exp(CTor("Node", Exp(Tuple([Exp(CTor("Leaf", Exp(Tuple([])))), Exp(CTor("S", Exp(CTor("S", Exp(CTor("O", Exp(Tuple([])))))))), Exp(CTor("Leaf", Exp(Tuple([]))))]))))]))),
                    ),
                ],
                output: Exp(
                    CTor("Cons", Exp(Tuple([Exp(CTor("S", Exp(CTor("O", Exp(Tuple([])))))), Exp(CTor("Cons", Exp(Tuple([Exp(CTor("S", Exp(CTor("S", Exp(CTor("O", Exp(Tuple([])))))))), Exp(CTor("Nil", Exp(Tuple([]))))]))))]))),
                ),
            },
        ],
    ),
}
